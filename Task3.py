# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oRFWSXHSmKYdH6YHwWxuIGruBbtRGjsk
"""

# AI-suggested (GitHub Copilot)
def sort_dicts_by_key(data, key):
    return sorted(data, key=lambda x: x.get(key, ''))

# Manual version
def sort_dicts_by_key_manual(data, key):
    sorted_list = []
    for item in data:
        inserted = False
        for i, sorted_item in enumerate(sorted_list):
            if item[key] < sorted_item[key]:
                sorted_list.insert(i, item)
                inserted = True
                break
        if not inserted:
            sorted_list.append(item)
    return sorted_list

def sort_by_key(data, key):
    return sorted(data, key=lambda x: x.get(key, 0))

def sort_by_key_manual(data, key):
    for i in range(len(data)):
        for j in range(i + 1, len(data)):
            if data[i][key] > data[j][key]:
                data[i], data[j] = data[j], data[i]
    return data

def sort_by_key_manual(data, key):
    for i in range(len(data)):
        for j in range(i + 1, len(data)):
            if data[i][key] > data[j][key]:
                data[i], data[j] = data[j], data[i]
    return data

data = [
    {"name": "Mel", "score": 85},
    {"name": "Tony", "score": 92},
    {"name": "Zane", "score": 78}
]

from sklearn.datasets import load_breast_cancer
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score

# Load dataset
data = load_breast_cancer()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target)

# Simulate priority levels (0 = low, 1 = high)
# You can remap or create a 3-class version if needed
y_priority = y.map({0: "High", 1: "Low"})  # Simplified for binary classification

X_train, X_test, y_train, y_test = train_test_split(X, y_priority, test_size=0.2, random_state=42)

model = RandomForestClassifier()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred, average='weighted'))